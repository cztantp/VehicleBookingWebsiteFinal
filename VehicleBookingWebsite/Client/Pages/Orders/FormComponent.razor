@inject HttpClient _client

<EditForm Model="@order" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <fieldset disabled="@Disabled">
        <div class="form-group">
            <label>Date and Time: </label>
            <div>
                <InputDate @bind-Value="@order.OrderDateTime" class="form-control" />
                <ValidationMessage For="@(() => order.OrderDateTime)" />
            </div>

            <label>Quantity: </label>
            <div>
                <InputNumber @bind-Value="@order.Quantity" class="form-control" />
                <ValidationMessage For="@(() => order.Quantity)" />
            </div>

            <label>Location: </label>
            <div>
                <InputText @bind-Value="@order.Location" class="form-control" />
                <ValidationMessage For="@(() => order.Location)" />
            </div>

            <label>Customer: </label>
            <div>
                <InputSelect @bind-Value="order.CustomerID" class="form-control">
                    <option value="">-- Select Customer --</option>
                    @if (Customers != null)
                    {
                        foreach (var customer in Customers)
                        {
                            <option value="@customer.Id">@customer.FirstName - @customer.Email</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => order.CustomerID)" />
            </div>

            <label>Staff: </label>
            <div>
                <InputSelect @bind-Value="order.StaffID" class="form-control">
                    <option value="">-- Select Staff --</option>
                    @if (Staff != null)
                    {
                        foreach (var staff in Staff)
                        {
                            <option value="@staff.Id">@staff.FirstName</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => order.StaffID)" />
            </div>

        </div>
    </fieldset>

    @if (!Disabled)
    {
        <button type="submit" class="btn btn-success btn-block">

            @ButtonText

        </button>
    }
    <BackToList Target="orders" />
</EditForm>

@code {
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public Order order { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    private IList<Customer> Customers;
    private IList<Staff> Staff;

    protected async override Task OnInitializedAsync()

    {
        Customers = await _client.GetFromJsonAsync<List<Customer>>($"{Endpoint.CustomersEndpoint}");
        Staff = await _client.GetFromJsonAsync<List<Staff>>($"{Endpoint.StaffsEndpoint}");
    }
}