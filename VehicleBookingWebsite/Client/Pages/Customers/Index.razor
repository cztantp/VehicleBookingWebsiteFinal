@page "/customers/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
@inject HttpInterceptorService _interceptor
@implements IDisposable

<h3 class="card-title"> Customers </h3>
<a href="/customers/create" class="btn-btn-secondary">
    <span class="oi oi-plus"></span>
    Create New Customer
</a>
<br />
<br />

@if (Customers == null)
{
<div class="alert alert-info"> Loading Customers...</div> 
}

else
{
    <table class="table table-responsive">
        <thead>
            <tr>
                <th> First Name </th>
                <th> Last Name </th>
                <th> Address </th>
                <th> Contact Number </th>
                <th> Date Of Birth </th>
                <th> Email Address </th>
                <th> Card Number </th>
                <th> Actions </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var customer in Customers)
            {
                <tr>
                    <td> @customer.FirstName </td>
                    <td> @customer.LastName </td>
                    <td> @customer.Address </td>
                    <td> @customer.Contact </td>
                    <td> @customer.DOB </td>
                    <td> @customer.Email </td>
                    <td> @customer.CardNumber </td>
                    <td>
                        <a href="/customers/view/@customer.Id" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="/customers/edit/@customer.Id" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="@(()=>Delete(customer.Id))">
                            <span class="oi oi-delete"></span>
                        </button>
                    </td>
                </tr>
                }
        </tbody>
    </table>
}

@code { 
    private List<Customer> Customers;
    protected async override Task OnInitializedAsync()
    {
        _interceptor.MonitorEvent();
        Customers = await _client.GetFromJsonAsync<List<Customer>>($"{Endpoint.CustomersEndpoint}");
    }

    async Task Delete(int customerId)
    {
        var customer = Customers.First(q => q.Id == customerId);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {customer.FirstName}?");
        if (confirm)
        {
            await _client.DeleteAsync($"{Endpoint.CustomersEndpoint}/{customerId}");
            await OnInitializedAsync();
        }
    }
    public void Dispose()
    {
        _interceptor.DisposeEvent();
    }
}

